{ config, lib, pkgs, ... }:

with lib;

let

  cfg = config.programs.afew;

  dag = config.lib.dag;

  mkIniKeyValue = key: value:
    let
      tweakVal = v:
        if isString v then v
        else if isList v then concatMapStringsSep ";" tweakVal v
        else if isBool v then (if v then "true" else "false")
        else toString v;
    in
      "${key}=${tweakVal value}";

  mkDag = filters:
    let
      mkNode = nodeName: filter:
        let
          before = (filter.before or ["@end"]);
          after = (filter.after or ["@begin"]);
          filterName = (filter.class or "Filter");
          filterKV = (removeAttrs filter ["after" "before" "class"]) // {
            "#nodeName" = nodeName;
            "#before" = before;
            "#after" = after;
          };
        in
          dag.entryBetween before after (nameValuePair filterName filterKV);
    in
      mapAttrs mkNode filters;

  /* Return a topologically sorted list of DAG entries encapsulating
     name value pairs.
  */
  reorderFilters = filters:
    (dag.topoSort (mkDag filters)).result;

  /* Convert a topologically sorted list of DAG nodes to a list of INI
     sections.  The section name is appended with an index number to
     prevent clashes, as is required by afew.
  */
  toOrderedINI = {
    mkKeyValue ? mkKeyValueDefault {} "="
  }: filters:
    let
      mkSection = iota: node: ''
        [${node.data.name}.${toString iota}]
        ${toKV node.data.value}
      '';
      toKV = attrs: generators.toKeyValue { inherit mkKeyValue; } attrs;
    in
      concatStringsSep "\n" (imap0 mkSection filters);

in

{
  options.programs.afew = {
    enable = mkEnableOption "the afew initial tagging script for Notmuch";

    defaultFilters = mkOption {
      type = types.attrsOf types.attrs;
      default = {
        "@begin" = { message = "BEGIN"; after = []; before = []; };
        "@end" = { message = "END"; after = ["@begin"]; before = []; };
      };
      description = ''
        An initial value for the filters DAG. It should only contain
        "dummy" nodes. Those dummy nodes are conventionally prefixed
        with <literal>@</literal>.
      '';
    };

    filters = mkOption {
      type = with types;
        let
          primitive = either bool (either int str);
        in
          attrsOf (attrsOf (either primitive (listOf primitive)));
      default = {
        spam = { class = "SpamFilter"; before = ["@begin"]; after = []; };
        killThreads = { class = "KillThreadsFilter"; before = ["@begin"]; after = []; };
        listMails = { class = "ListMailsFilter"; before = ["@begin"]; after = []; };
        archiveSentMails = { class = "ArchiveSentMailsFilter"; before = ["@begin"]; after = []; };
        inbox = { class = "InboxFilter"; after = ["@end"]; before = []; };
      };
      description = ''
        Filters added to afew configuration file. Available configuration
        options are described in the afew manual: <link
        xlink:href="https://afew.readthedocs.io/en/latest/configuration.html" />.
      '';
      example = literalExample ''
        {
          spam = {
            class = "SpamFilter";
            before = ["@begin"];
            after = [];
          };

          boss = {
            query = "from:pointyheaded@boss.com";
            tags = ["-new" "+boss"];
            message = "Message from above";
          };

          inbox = {
            class = "InboxFilter";
            before = [];
            after = ["@end"];
          };
        }
      '';
    };

    extraConfig = mkOption {
      type = types.lines;
      default = "";
      example = ''
        [SpamFilter]

        [Filter.0]
        query = from:pointyheaded@boss.com
        tags = -new;+boss
        message = Message from above

        [InboxFilter]
      '';
      description = ''
        This option is deprecated if you use filters as you won't be
        able to control the order of the filters.
        Extra lines prepended to the afew configuration file. Available
        configuration options are described in the afew manual: <link
        xlink:href="https://afew.readthedocs.io/en/latest/configuration.html" />.
      '';
    };
  };

  config = mkIf cfg.enable {
    home.packages = [ pkgs.afew ];

    xdg.configFile."afew/config".text = ''
      # Generated by Home Manager.
      # See https://afew.readthedocs.io/

      ${cfg.extraConfig}
      ${toOrderedINI { mkKeyValue = mkIniKeyValue; } (reorderFilters (cfg.defaultFilters // cfg.filters))}
    '';

  };
}
