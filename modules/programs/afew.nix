{ config, lib, pkgs, ... }:

with lib;

let

  cfg = config.programs.afew;

  mkIniKeyValue = key: value:
    let
      tweakVal = v:
        if isString v then v
        else if isList v then concatMapStringsSep ";" tweakVal v
        else if isBool v then (if v then "true" else "false")
        else toString v;
    in
      "${key}=${tweakVal value}";

  /* Return a list of name value pairs where name is "class.index" and value is
     an attribute set of arbitrary afew options.

     Example:
       filters = [
         { class="Class", q="a"; }
         { q = "b"}
       ]
      => [{ name = "Class.1"; value = { "q" = "a"; }; }
          { name = "Filter.2"; value = { "q" = "b"; }; }]
  */
  processAfewFilters = afewFilters:
    let
      getClass = attrs: attrs.class or "Filter";
      removeClass = filterAttrs (n: v: n != "class");
      indexed = imap0 (i: v:
        v // { class = "${getClass v}.${toString (i+1000)}"; }
      );
      toPair = mkKey: mkValue: attrs:
        nameValuePair (mkKey attrs) (mkValue attrs);
    in
      map (toPair getClass removeClass) (indexed afewFilters);

  /* Convert a list of name value pairs to a list of INI sections */
  toOrderedINI = {
    mkKeyValue ? mkKeyValueDefault {} "="
  }: afewFilters:
    let
      mkSection = pair: ''
        ${mkSectionName pair}
        ${toKV pair.value}'';
      mkSectionName = pair: "[${pair.name}]";
      toKV = attrs: generators.toKeyValue { inherit mkKeyValue; } attrs;
    in
      concatStringsSep "\n" (map mkSection afewFilters);

in

{
  options.programs.afew = {
    enable = mkEnableOption "the afew initial tagging script for Notmuch";

    filters = mkOption {
      type = types.listOf (types.attrs);
      default = [
        { class = "SpamFilter"; }
        { class = "KillThreadsFilter"; }
        { class = "ListMailsFilter"; }
        { class = "ArchiveSentMailsFilter"; }
        { class = "InboxFilter"; }
      ];
      description = ''
        Filters added to afew configuration file. Available configuration
        options are described in the afew manual: <link
        xlink:href="https://afew.readthedocs.io/en/latest/configuration.html" />.
      '';
      example = literalExample ''
        [
          { class = "SpamFilter"; }

          { query = "frompointyheaded@boss.com";
            tags = ["-new" "+boss"];
            message = "Message from above"; }

          { class = "InboxFilter"; }
        ]
      '';
    };

    extraConfig = mkOption {
      type = types.lines;
      default = "";
      example = ''
        [SpamFilter]

        [Filter.0]
        query = from:pointyheaded@boss.com
        tags = -new;+boss
        message = Message from above

        [InboxFilter]
      '';
      description = ''
        Extra lines prepended to the afew configuration file. Available
        configuration options are described in the afew manual: <link
        xlink:href="https://afew.readthedocs.io/en/latest/configuration.html" />.
      '';
    };
  };

  config = mkIf cfg.enable {
    home.packages = [ pkgs.afew ];

    xdg.configFile."afew/config".text = ''
      # Generated by Home Manager.
      # See https://afew.readthedocs.io/

      ${cfg.extraConfig}
      ${toOrderedINI { mkKeyValue = mkIniKeyValue; } (processAfewFilters (cfg.filters))}
    '';

  };
}
